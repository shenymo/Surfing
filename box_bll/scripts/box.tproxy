#!/system/bin/sh  
  
export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"  
  
scripts=$(realpath $0)  
scripts_dir=$(dirname ${scripts})  
  
source ${scripts_dir}/box.config  

mark_id="16777216/16777216"  
table_id="2024"  
# routing_mark="233"  
  
log() {
export TZ=Asia/Shanghai
now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
case $1 in
Info)
[ -t 1 ] && echo -e "\033[1;32m${now} [信息]: $2\033[0m" || echo "${now} [Info]: $2"
;;
Warn)
[ -t 1 ] && echo -e "\033[1;33m${now} [警告]: $2\033[0m" || echo "${now} [Warn]: $2"
;;
Error)
[ -t 1 ] && echo -e "\033[1;31m${now} [错误]: $2\033[0m" || echo "${now} [Error]: $2"
;;
*)
[ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
;;
esac
}
  
uid_list=()  
find_packages_uid() {  
  for user_package in ${user_packages_list[@]} ; do  
    user=$(echo ${user_package} | awk -F ':' '{print $1}')  
    package=$(echo ${user_package} | awk -F ':' '{print $2}')  
    uid="$(awk '{if($1=="'${package}'"){print $2}}' /data/system/packages.list)"  
    if [[ -n "${uid}" ]]; then  
      uid_list[${#uid_list[@]}]=$(expr ${user} \* "100000" + ${uid})  
    fi  
  done  
}  
  
probe_user_group() {  
  if bin_pid=$(busybox pidof ${bin_name}) ; then  
    box_user=$(stat -c %U /proc/${bin_pid})  
    box_group=$(stat -c %G /proc/${bin_pid})  
    return 0  
  else  
    box_user=$(echo ${box_user_group} | awk -F ':' '{print $1}')  
    box_group=$(echo ${box_user_group} | awk -F ':' '{print $2}')  
    return 1  
  fi  
}  

start_redirect() {
  ${iptables} -t nat -N BOX_EXTERNAL 
  ${iptables} -t nat -F BOX_EXTERNAL 
  ${iptables} -t nat -N BOX_LOCAL 
  ${iptables} -t nat -F BOX_LOCAL 

  if [ "${bin_name}" = "clash" ]; then
    ${iptables} -t nat -A BOX_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${clash_dns_port}
    ${iptables} -t nat -A BOX_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${clash_dns_port}
    ${iptables} -t nat -A BOX_EXTERNAL -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -A BOX_LOCAL -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1
  fi

  for subnet in ${intranet[@]} ; do
    ${iptables} -t nat -A BOX_EXTERNAL -d ${subnet} -j RETURN
    ${iptables} -t nat -A BOX_LOCAL -d ${subnet} -j RETURN
    ${iptables} -t nat -N LOCAL_IP_V4 2>/dev/null || true
    ${iptables} -t nat -F LOCAL_IP_V4 2>/dev/null || true
    ${iptables} -t nat -A BOX_EXTERNAL -j LOCAL_IP_V4
    ${iptables} -t nat -A BOX_LOCAL -j LOCAL_IP_V4
  done

  ${iptables} -t nat -A BOX_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${redir_port}

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[@]} ; do
      ${iptables} -t nat -A BOX_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${redir_port}
    done
    log Info "${ap_list[*]} 透明代理已启用."
  fi

  ${iptables} -t nat -I PREROUTING -j BOX_EXTERNAL
  ${iptables} -t nat -I BOX_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN

  if [ "${ignore_out_list}" != "" ] ; then
    for ignore in ${ignore_out_list[@]} ; do
      ${iptables} -t nat -A BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} 不走透明代理."
  fi

  if [ "${proxy_mode}" = "blacklist" ] ; then
    if [ "${#uid_list[@]}" -eq 0 ]; then
      ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
    log Info "透明代理将应用至全局所有应用(IPv4)."
    log Info "所有应用的透明代理已启用(IPv4)."
    else
      for appid in ${uid_list[@]} ; do
        ${iptables} -t nat -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
      log Info "代理模式: ${proxy_mode}, ${user_packages_list[*]} 未启用透明代理."
    fi
    if [ "${#gid_list[@]}" -ne 0 ]; then
      for gid in ${gid_list[@]} ; do
        ${iptables} -t nat -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN
      done
      log Info "代理模式: ${proxy_mode}, GID ${gid_list[*]} 未启用透明代理."
    fi
  elif [ "${proxy_mode}" = "whitelist" ] ; then
    if [ "${#uid_list[@]}" -ne 0 ]; then
      for appid in ${uid_list[@]} ; do
        ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${redir_port}
        ${iptables} -t nat -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${redir_port}
      done
      ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j REDIRECT --to-ports ${redir_port}
      ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j REDIRECT --to-ports ${redir_port}
      log Info "代理模式: ${proxy_mode}, ${user_packages_list[*]} 透明代理已启用."
    fi
    if [ "${#gid_list[@]}" -ne 0 ]; then
      for gid in ${gid_list[@]} ; do
        ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --gid-owner ${gid} -j REDIRECT --to-ports ${redir_port}
      done
      log Info "代理模式: ${proxy_mode}, GID ${gid_list[*]} 透明代理已启用."
    fi
  else
    log Warn "代理模式: ${proxy_mode} 错误."
    ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
    log Info "透明代理将应用至全局所有应用(IPv4)."
    log Info "所有应用的透明代理已启用(IPv4)."
  fi

  ${iptables} -t nat -I OUTPUT -j BOX_LOCAL
  ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${redir_port} -j REJECT
}

stop_redirect() {
  ${iptables} -t nat -D PREROUTING -j BOX_EXTERNAL

  ${iptables} -t nat -D OUTPUT -j BOX_LOCAL

  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${redir_port} -j REJECT
  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT
  
  ${iptables} -t nat -F BOX_EXTERNAL
  ${iptables} -t nat -X BOX_EXTERNAL
  ${iptables} -t nat -F BOX_LOCAL
  ${iptables} -t nat -X BOX_LOCAL
  ${iptables} -t nat -F LOCAL_IP_V4
  ${iptables} -t nat -X LOCAL_IP_V4
}

start_tproxy() {  
  if [ "${iptables}" = "ip6tables -w 100" ] ; then  
    ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${table_id}  
    ip -6 route add local default dev lo table ${table_id}  
  else  
    ip rule add fwmark ${mark_id} table ${table_id} pref ${table_id}  
    ip route add local default dev lo table ${table_id}  
  fi  
  
  ${iptables} -t mangle -N BOX_EXTERNAL  
  ${iptables} -t mangle -F BOX_EXTERNAL  
  
  # 绕过Box自身  
  # ${iptables} -t mangle -A BOX_EXTERNAL -m mark --mark ${routing_mark} -j RETURN  
  
  # 绕过其他接口  
  # 注意：某些接口命名为 r_ / oem / nm_ / qcom_  
  # 可能需要更复杂的解决方案.  
  # ${iptables} -t mangle -A BOX_EXTERNAL -i rmnet_data+ -j RETURN  
  # ${iptables} -t mangle -A BOX_EXTERNAL -i ccmni+ -j RETURN  
  
  # 跳过已由TProxy处理的流量  
  # 如果默认路由的接口具有ISP分配的公共IPv4或IPv6地址，则省略这些规则将导致本地流量代理行为异常，可能导致整个网络变慢  
  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -m socket --transparent -j MARK --set-xmark ${mark_id}  
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -m socket --transparent -j MARK --set-xmark ${mark_id}  
  ${iptables} -t mangle -A BOX_EXTERNAL -m socket -j RETURN  
  
  if [ "${mihomo_dns_forward}" = "true" ] && [ "${bin_name}" = "mihomo" ] || [ "${bin_name}" = "hysteria" ] || [ "${bin_name}" = "clash" ] ; then  
    ${iptables} -t mangle -A BOX_EXTERNAL -p tcp --dport 53 -j RETURN  
    ${iptables} -t mangle -A BOX_EXTERNAL -p udp --dport 53 -j RETURN  
  else  
    # 路由DNS请求到Box  
    ${iptables} -t mangle -A BOX_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  
    ${iptables} -t mangle -A BOX_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  
  fi  
  # 绕过内网  
  # 运行 `su -c 'zcat /proc/config.gz | grep -i addrtype'` 检查兼容性  
  # ${iptables} -t mangle -A BOX_EXTERNAL -m addrtype --dst-type LOCAL -j RETURN  
  if [ "${iptables}" = "ip6tables -w 100" ] ; then  
    for subnet6 in ${intranet6[@]} ; do  
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet6} -j RETURN  
    done  
    ${iptables} -t mangle -N LOCAL_IP_V6  
    ${iptables} -t mangle -F LOCAL_IP_V6  
    ${iptables} -t mangle -A BOX_EXTERNAL -j LOCAL_IP_V6  
  else  
    for subnet in ${intranet[@]} ; do  
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN  
    done  
    ${iptables} -t mangle -N LOCAL_IP_V4  
    ${iptables} -t mangle -F LOCAL_IP_V4  
    ${iptables} -t mangle -A BOX_EXTERNAL -j LOCAL_IP_V4  
  fi  
  
  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  

  # 允许AP接口  
  # 注意：旧版Android设备可能只有一个wlan接口.  
  # 某些新版Android设备有多个wlan接口，如wlan0（用于互联网）、wlan1（用于AP）.  
  if [ "${ap_list}" != "" ] ; then  
    for ap in ${ap_list[@]} ; do  
      ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  
      ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}  
    done  
    log Info "${ap_list[*]} 透明代理已启用."  
  fi  
  
  ${iptables} -t mangle -I PREROUTING -j BOX_EXTERNAL  
  
  ${iptables} -t mangle -N BOX_LOCAL  
  ${iptables} -t mangle -F BOX_LOCAL  

  # 绕过Box自身  
  ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN  
  # ${iptables} -t mangle -A BOX_LOCAL -m mark --mark ${routing_mark} -j RETURN  
  
  # 绕过忽略的接口  
  if [ "${ignore_out_list}" != "" ] ; then  
    for ignore in ${ignore_out_list[@]} ; do  
      ${iptables} -t mangle -A BOX_LOCAL -o ${ignore} -j RETURN  
    done  
    log Info "${ignore_out_list[*]} 忽略透明代理."  
  fi  
  
  if [ "${mihomo_dns_forward}" = "true" ] && [ "${bin_name}" = "mihomo" ] || [ "${bin_name}" = "hysteria" ] || [ "${bin_name}" = "clash" ] ; then  
    ${iptables} -t mangle -A BOX_LOCAL -p tcp --dport 53 -j RETURN  
    ${iptables} -t mangle -A BOX_LOCAL -p udp --dport 53 -j RETURN  
  else  
    # 路由DNS请求到Box  
    ${iptables} -t mangle -A BOX_LOCAL -p tcp --dport 53 -j MARK --set-xmark ${mark_id}  
    ${iptables} -t mangle -A BOX_LOCAL -p udp --dport 53 -j MARK --set-xmark ${mark_id}  
  fi  
  # 绕过内网  
  # ${iptables} -t mangle -A BOX_LOCAL -m addrtype --dst-type LOCAL -j RETURN  
  if [ "${iptables}" = "ip6tables -w 100" ] ; then  
    for subnet6 in ${intranet6[@]} ; do  
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet6} -j RETURN  
    done  
    ${iptables} -t mangle -A BOX_LOCAL -j LOCAL_IP_V6  
  else  
    for subnet in ${intranet[@]} ; do  
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN  
    done  
    ${iptables} -t mangle -A BOX_LOCAL -j LOCAL_IP_V4  
  fi  
  
  # 禁用内核  
  # ${iptables} -t mangle -A BOX_LOCAL -m owner ! --uid 0-99999999 -j DROP  
  
  if [ "${proxy_mode}" = "blacklist" ] ; then  
    if [ "${uid_list}" = "" ] ; then  
      # 路由所有流量
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}  
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}  
    log Info "透明代理将应用至全局所有应用(IPv4/IPv6)."
    log Info "所有应用的透明代理已启用(IPv4/IPv6)."
    else  
      # 绕过应用  
      for appid in ${uid_list[@]} ; do  
        ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN  
      done  
      # 允许 !app  
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}  
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}  
      log Info "代理模式: ${proxy_mode}, ${user_packages_list[*]} 未启用透明代理."  
    fi  
    if [ "${gid_list}" != "" ] ; then  
      # 绕过GID  
      for gid in ${gid_list[@]} ; do  
        ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN  
      done  
      log Info "代理模式: ${proxy_mode}, GID ${gid_list[*]} 未启用透明代理."  
    fi  
  elif [ "${proxy_mode}" = "whitelist" ] ; then  
    if [ "${uid_list}" != "" ] ; then  
      # 路由应用到Box  
      for appid in ${uid_list[@]} ; do  
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}  
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}  
      done  
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}  
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}  
      # 路由dnsmasq到Box  
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}  
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}  
      log Info "代理模式: ${proxy_mode}, ${user_packages_list[*]} 透明代理已启用."  
    fi  
    if [ "${gid_list}" != "" ] ; then  
      # 路由GID到Box  
      for gid in ${gid_list[@]} ; do  
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}  
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}  
      done  
      log Info "代理模式: ${proxy_mode}, GID ${gid_list[*]} 透明代理已启用."  
    fi  
  else  
    log Warn "代理模式: ${proxy_mode} 错误."  
    # 路由所有流量  
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}  
    ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}  
    log Info "透明代理将应用至所有应用（全局）(IPv4/IPv6)."
    log Info "所有应用的透明代理已启用(IPv4/IPv6)."
  fi  
  
  ${iptables} -t mangle -I OUTPUT -j BOX_LOCAL  
  
  ${iptables} -t mangle -N DIVERT  
  ${iptables} -t mangle -F DIVERT  
  
  ${iptables} -t mangle -A DIVERT -j MARK --set-xmark ${mark_id}  
  ${iptables} -t mangle -A DIVERT -j ACCEPT  
  
  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT  
  
  # 此规则阻止本地访问tproxy端口以防止流量回环.  
  if [ "${iptables}" = "ip6tables -w 100" ] ; then  
    ${iptables} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT  
  else  
    ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT  
  fi  
  
  if [ "${mihomo_dns_forward}" = "true" ] && [ "${bin_name}" = "mihomo" ] || [ "${bin_name}" = "clash" ] ; then  
    if [ "${iptables}" = "iptables -w 100" ] ; then  
      # android ip6tablses 没有nat表  
      ${iptables} -t nat -N CLASH_DNS_EXTERNAL  
      ${iptables} -t nat -F CLASH_DNS_EXTERNAL  
  
      ${iptables} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${clash_dns_port}  
  
      ${iptables} -t nat -I PREROUTING -j CLASH_DNS_EXTERNAL  
  
  
      ${iptables} -t nat -N CLASH_DNS_LOCAL  
      ${iptables} -t nat -F CLASH_DNS_LOCAL  
  
      ${iptables} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN  
  
      ${iptables} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${clash_dns_port}  
  
      ${iptables} -t nat -I OUTPUT -j CLASH_DNS_LOCAL
    fi  
  fi  


  # 修复ICMP（ping），这不保证ping结果是有效的（如clash等代理不支持转发ICMP），  
  # 只是返回结果，"--to-destination"可以设置为可达地址  
  iptables -w 100 -t nat -A OUTPUT -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1  
  iptables -w 100 -t nat -A PREROUTING -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1  
  #ip6tables -w 100 -t nat -A OUTPUT -d ${fake_ip_range_v6} -p icmp -j DNAT --to-destination ::1  
  #ip6tables -w 100 -t nat -A PREROUTING -d ${fake_ip_range_v6} -p icmp -j DNAT --to-destination ::1  
}  
  
stop_tproxy() {  
  ip -6 rule del fwmark ${mark_id} table ${table_id} pref ${table_id}  
  ip -6 route flush table ${table_id}  
  ip rule del fwmark ${mark_id} table ${table_id} pref ${table_id}  
  ip route flush table ${table_id}  
  
  ${iptables} -t mangle -D PREROUTING -j BOX_EXTERNAL  
      
  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT  
  
  ${iptables} -t mangle -D OUTPUT -j BOX_LOCAL  
  
  ${iptables} -t mangle -F BOX_EXTERNAL  
  ${iptables} -t mangle -X BOX_EXTERNAL  
  
  ${iptables} -t mangle -F BOX_LOCAL  
  ${iptables} -t mangle -X BOX_LOCAL  
  
  iptables -t mangle -F LOCAL_IP_V4  
  iptables -t mangle -X LOCAL_IP_V4  
  ip6tables -t mangle -F LOCAL_IP_V6  
  ip6tables -t mangle -X LOCAL_IP_V6  
  
  ${iptables} -t mangle -F DIVERT  
  ${iptables} -t mangle -X DIVERT  
  
  if [ "${iptables}" = "ip6tables -w 100" ] ; then  
    ${iptables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT  
    ${iptables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT  
  else  
    ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT  
    ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT  
  fi  
  
  # android ip6tablses 没有nat表  
  iptables="iptables -w 100"  
  ${iptables} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL  
  
  ${iptables} -t nat -D OUTPUT -j CLASH_DNS_LOCAL  
  
  ${iptables} -t nat -F CLASH_DNS_EXTERNAL  
  ${iptables} -t nat -X CLASH_DNS_EXTERNAL  
  
  ${iptables} -t nat -F CLASH_DNS_LOCAL  
  ${iptables} -t nat -X CLASH_DNS_LOCAL  
  
  iptables -t nat -D OUTPUT -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1  
  iptables -t nat -D PREROUTING -d ${fake_ip_range_v4} -p icmp -j DNAT --to-destination 127.0.0.1  
  #ip6tables -t nat -D OUTPUT -d ${fake_ip_range_v6} -p icmp -j DNAT --to-destination ::1  
  #ip6tables -t nat -D PREROUTING -d ${fake_ip_range_v6} -p icmp -j DNAT --to-destination ::1  
}  
  
disable_ipv6() {
  echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}
enable_ipv6() {
  echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}

if [ "${proxy_mode}" = "core" ] ; then
  iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
  iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
  iptables="iptables -w 100" && stop_redirect >> /dev/null 2>&1
  log Info "代理模式: ${proxy_mode}, 透明代理已禁用."
  return 0
fi

case "$1" in
  enable)
    log Info "正在启动透明代理..."
    iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="iptables -w 100" && stop_redirect >> /dev/null 2>&1
    sleep 1

    if ! probe_user_group ; then
      log Error "检查Box用户组失败，请确保 ${bin_name} 核心已启动."
      return 1
    fi

    find_packages_uid
    intranet[${#intranet[@]}]=$(ip -4 a | awk '/inet/ {print $2}' | grep -vE "^127.0.0.1")

    if [ "${proxy_method}" = "TPROXY" ] ; then
      if (zcat /proc/config.gz | grep -q TPROXY) ; then
        log Info "使用 TPROXY: TCP+UDP"
        log Info "正在创建透明代理规则..."
        iptables="iptables -w 100"
        start_tproxy && log Info "创建 ip(6)tables 透明代理规则完成." || (log Error "创建 ip(6)tables 透明代理规则失败." && stop_tproxy >> /dev/null 2>&1)

        if [ "${ipv6}" = "enable" ] ; then
          log Debug "IPv6: 正在使用"
          enable_ipv6
          iptables="ip6tables -w 100"
          intranet6[${#intranet6[@]}]=$(ip -6 a | awk '/inet6/ {print $2}' | grep -vE "^fe80|^::1")
          start_tproxy && log Info "创建 ip6tables 透明代理规则完成." || (log Error "创建 ip6tables 透明代理规则失败." && stop_tproxy >> /dev/null 2>&1)
        else
          log Warn "IPv6 模式: 禁用"
          disable_ipv6
        fi
      else
        log Warn "设备不支持 TPROXY，切换至 REDIRECT 代理方法"
        log Info "使用 REDIRECT: TCP"
        log Info "正在创建透明代理规则..."
        iptables="iptables -w 100"
        start_redirect && log Info "创建 iptables 透明代理规则完成." || (log Error "创建 iptables 透明代理规则失败." && stop_redirect >> /dev/null 2>&1)

        if [ "${ipv6}" = "enable" ] ; then
          enable_ipv6
          log Warn "IPv6 模式: 启用"
        else
          disable_ipv6
          log Warn "IPv6 模式: 禁用"
        fi
      fi
    else
      [ "${proxy_method}" = "REDIRECT" ] && log Info "使用 REDIRECT: TCP" || log Info "使用 MIXED: TCP+TUN"
      log Info "正在创建透明代理规则..."
      iptables="iptables -w 100"
      start_redirect && log Info "创建 iptables 透明代理规则完成." || (log Error "创建 iptables 透明代理规则失败." && stop_redirect >> /dev/null 2>&1)

      if [ "${ipv6}" = "enable" ] ; then
        enable_ipv6
        log Warn "IPv6 模式: 启用"
      else
        disable_ipv6
        log Warn "IPv6 模式: 禁用"
      fi
    fi
    ;;

  disable)
    log Warn "正在清理 ip(6)tables 透明代理规则..."
    probe_user_group
    iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="iptables -w 100" && stop_redirect >> /dev/null 2>&1
    log Warn "清理完成"

    enable_ipv6
    log Info "IPv6 已恢复默认启用"
    return 0
    ;;

  renew)
    log Warn "正在重新应用透明代理规则..."
    iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
    iptables="iptables -w 100" && stop_redirect >> /dev/null 2>&1
    log Warn "旧规则已清理"
    sleep 3

    if ! probe_user_group ; then
      log Error "检查Box用户组失败，请确保 ${bin_name} 核心已启动."
      return 1
    fi

    find_packages_uid
    intranet[${#intranet[@]}]=$(ip -4 a | awk '/inet/ {print $2}' | grep -vE "^127.0.0.1")

    if [ "${proxy_method}" = "TPROXY" ] ; then
      log Info "重新应用 TPROXY 规则..."
      iptables="iptables -w 100"
      start_tproxy && log Info "重新创建 iptables 透明代理规则完成." || (log Error "创建失败." && stop_tproxy >> /dev/null 2>&1)

      if [ "${ipv6}" = "enable" ] ; then
        enable_ipv6
        log Warn "IPv6 模式: 启用"
      else
        disable_ipv6
        log Warn "IPv6 模式: 禁用"
      fi
    else
      log Info "重新应用 REDIRECT 规则..."
      iptables="iptables -w 100"
      start_redirect && log Info "重新创建 iptables 透明代理规则完成." || (log Error "创建失败." && stop_redirect >> /dev/null 2>&1)
    fi
    ;;

  enable_ipv6)
    enable_ipv6
    log Warn "IPv6 启用"
    ;;

  disable_ipv6)
    disable_ipv6
    log Warn "IPv6 禁用"
    ;;

  *)
    log Error "用法: $0 {enable|disable|renew|enable_ipv6|disable_ipv6}"
    ;;
esac