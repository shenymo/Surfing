#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

module_dir="/data/adb/modules/Surfing"
base_dir="/data/adb/box_bll"
variab_dir="${base_dir}/variab"
log_file="${base_dir}/debug.log"
log_file_path="/data/local/tmp/"
temp_log_file="${log_file_path}debug.log.tmp"
last_check_file="${variab_dir}/last_check_time"
last_wifi_state_file="${variab_dir}/last_wifi_state"

log_enabled="true"

if [ ! -d "$variab_dir" ]; then
    mkdir -p "$variab_dir"
fi

scripts=$(realpath "$0")
scripts_dir=$(dirname "${scripts}")

events=$1
if [ "$events" != "w" ]; then
    return
fi

source "${scripts_dir}/box.config"

if [ "$enable_network_service_control" != "true" ]; then
    exit 0
fi

source "${scripts_dir}/ctr.utils"

log_msg() {
    if [ "$log_enabled" = "true" ]; then
        if [ -z "$1" ]; then
            echo "" >> "$log_file"
        else
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$log_file"
        fi
    fi
}

clean_old_logs() {
    retention_time=$((24 * 60 * 60))
    current_time=$(date +%s)
    if [ -f "$log_file" ]; then
        > "$temp_log_file"
        while IFS= read -r line; do
            log_date=$(echo "$line" | awk '{print $1, $2}')
            log_time=$(date -d "$log_date" +%s 2>/dev/null)
            if [ $? -eq 0 ] && [ $((current_time - log_time)) -lt "$retention_time" ]; then
                echo "$line" >> "$temp_log_file"
            fi
        done < "$log_file"
        mv "$temp_log_file" "$log_file"
    fi
}
clean_old_logs

current_time=$(date +%s)
last_check_time=0
if [ -f "$last_check_file" ]; then
    last_check_time=$(cat "$last_check_file")
fi

time_diff=$((current_time - last_check_time))
stability_window=3

if [ "$time_diff" -lt "$stability_window" ]; then
    log_msg "Skip check:（${time_diff}秒），进入稳定性窗口"
    return
fi

echo "$current_time" > "$last_check_file"

wifi_status=$(is_wifi_connected)
ssid=$(get_current_ssid)

get_current_ip() {
    ip addr show wlan0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1
}

check_module_service() {
    if [ "$enable_network_service_control" = "true" ]; then
        if [ -f "${module_dir}/disable" ]; then
            current_state="disabled"
        else
            current_state="enabled"
        fi

        last_ssid=""
        last_ip=""
        if [ -f "$last_wifi_state_file" ]; then
            last_ssid=$(grep 'ssid:' "$last_wifi_state_file" | cut -d: -f2)
            last_ip=$(grep 'ip:' "$last_wifi_state_file" | cut -d: -f2)
        fi

        if [ "$wifi_status" = "wifi" ] && [ -n "$ssid" ]; then
            for i in {1..3}; do
                current_ip=$(get_current_ip)
                if [ -n "$current_ip" ]; then
                    break
                fi
                sleep 2
            done

            if [ -n "$current_ip" ]; then
                log_msg ""
                log_msg "网络波动？网络发生变化！"
                log_msg "WiFi已连接: ${ssid}"
                log_msg "IP地址：${current_ip}"
                echo "ssid:${ssid}" > "$last_wifi_state_file"
                echo "ip:${current_ip}" >> "$last_wifi_state_file"
                
                if [ "$use_module_on_wifi" = "false" ]; then
                    if [ "$current_state" != "disabled" ]; then
                        touch "${module_dir}/disable"
                        log_msg "当前配置：禁用"
                        log_msg "模块服务已禁用"
                    else
                        log_msg "当前配置：禁用"
                        log_msg "当前服务已是禁用，无需操作"
                    fi
                else
                    if [ "$use_ssid_matching" = "true" ]; then
                        if [ "$use_wifi_list_mode" = "blacklist" ]; then
                            log_msg "黑名单模式：启用"
                            log_msg "黑名单列表: ${blacklist_wifi_ssids}"
                            if is_allowed_wifi "$ssid" "$blacklist_wifi_ssids"; then
                                if [ "$current_state" != "disabled" ]; then
                                    touch "${module_dir}/disable"
                                    log_msg "当前配置：禁用"
                                    log_msg "已命中列表，模块服务已禁用"
                                else
                                    log_msg "当前配置：禁用"
                                    log_msg "已命中列表，当前模块服务已是禁用，无需操作"
                                fi
                            else
                                if [ "$current_state" != "enabled" ]; then
                                    rm "${module_dir}/disable" 2>/dev/null
                                    log_msg "当前配置：启用"
                                    log_msg "未命中列表，模块服务已启用"
                                else
                                    log_msg "当前配置：启用"
                                    log_msg "未命中列表，模块当前已是启用，无需操作"
                                fi
                            fi
                        elif [ "$use_wifi_list_mode" = "whitelist" ]; then
                            log_msg "白名单模式：启用"
                            log_msg "白名单列表: ${whitelist_wifi_ssids}"
                            if is_allowed_wifi "$ssid" "$whitelist_wifi_ssids"; then
                                if [ "$current_state" != "enabled" ]; then
                                    rm "${module_dir}/disable" 2>/dev/null
                                    log_msg "当前配置：启用"
                                    log_msg "已命中列表，模块服务已启用"
                                else
                                    log_msg "当前配置：启用"
                                    log_msg "已命中列表，当前模块服务已是启用，无需操作"
                                fi
                            else
                                if [ "$current_state" != "disabled" ]; then
                                    touch "${module_dir}/disable"
                                    log_msg "当前配置：禁用"
                                    log_msg "未命中列表，已禁用模块服务"
                                else
                                    log_msg "当前配置：禁用"
                                    log_msg "未命中列表，模块当前已是禁用，无需操作"
                                fi
                            fi
                        else
                            log_msg "警告：当前黑白名单模式选择为空"
                            if [ "$current_state" != "enabled" ]; then
                                rm "${module_dir}/disable" 2>/dev/null
                                log_msg "当前配置：启用"
                                log_msg "模块服务已启用（默认逻辑）"
                            else
                                log_msg "当前配置：启用"
                                log_msg "模块服务已是启用，无需操作（默认逻辑）"
                            fi
                        fi
                    else
                        log_msg "使用常规WiFi模块设置"
                        if [ "$current_state" != "enabled" ]; then
                            rm "${module_dir}/disable" 2>/dev/null
                            log_msg "当前配置：启用"
                            log_msg "模块服务已启用"
                        else
                            log_msg "当前配置：启用"
                            log_msg "模块服务已是启用，无需操作"
                        fi
                    fi
                fi
            else
                log_msg "未获取到有效的IP地址，视为WiFi连接失败"
            fi

        elif [ "$wifi_status" = "not_wifi" ]; then
            log_msg ""
            log_msg "网络波动？网络发生变化！"
            log_msg "当前WiFi已断开！"
            if [ "$use_module_on_wifi_disconnect" = "true" ]; then
                if [ "$current_state" != "enabled" ]; then
                    rm "${module_dir}/disable" 2>/dev/null
                    log_msg "当前配置：启用"
                    log_msg "模块服务已启用"
                else
                    log_msg "当前配置：启用"
                    log_msg "当前模块服务已是启用，无需操作"
                fi
            else
                if [ "$current_state" != "disabled" ]; then
                    touch "${module_dir}/disable"
                    log_msg "当前配置：禁用"
                    log_msg "模块服务已禁用"
                else
                    log_msg "当前配置：禁用"
                    log_msg "当前模块服务已是禁用，无需操作"
                fi
            fi
        fi
    else
        log_msg "网络波动？网络发生变化！"
        log_msg "网络控制模块服务已停用！"
        return
    fi
}
check_module_service